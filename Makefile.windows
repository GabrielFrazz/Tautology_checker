# Makefile para Windows - Tautology Checker
# Compatível com MinGW/MSYS2 e cmd.exe

CXX = g++
CXXFLAGS = -std=c++11 -Wall -Wextra -O2 -finput-charset=UTF-8 -fexec-charset=UTF-8

# Diretórios
COMMON_DIR = common
GENERATOR_DIR = generator
SOLVER_DIR = solver
BUILD_DIR = build
BIN_DIR = bin

# Arquivos fonte
COMMON_SOURCES = $(COMMON_DIR)/ast.cpp $(COMMON_DIR)/utils.cpp
GENERATOR_SOURCES = $(GENERATOR_DIR)/generator.cpp
SOLVER_SOURCES = $(SOLVER_DIR)/parser.cpp $(SOLVER_DIR)/evaluator.cpp $(SOLVER_DIR)/main.cpp

# Arquivos objeto
COMMON_OBJECTS = $(patsubst $(COMMON_DIR)/%.cpp,$(BUILD_DIR)/common/%.o,$(COMMON_SOURCES))
GENERATOR_OBJECTS = $(patsubst $(GENERATOR_DIR)/%.cpp,$(BUILD_DIR)/generator/%.o,$(GENERATOR_SOURCES))
SOLVER_OBJECTS = $(patsubst $(SOLVER_DIR)/%.cpp,$(BUILD_DIR)/solver/%.o,$(SOLVER_SOURCES))

# Executáveis (Windows)
GENERATOR_BIN = $(BIN_DIR)/generator.exe
SOLVER_BIN = $(BIN_DIR)/solver.exe

# Targets principais
.PHONY: all clean generate-simple generate-medium generate-hard test help

all: $(GENERATOR_BIN) $(SOLVER_BIN)

# Compilação
$(GENERATOR_BIN): $(COMMON_OBJECTS) $(GENERATOR_OBJECTS) | $(BIN_DIR)
	$(CXX) $(CXXFLAGS) -o $@ $^

$(SOLVER_BIN): $(COMMON_OBJECTS) $(SOLVER_OBJECTS) | $(BIN_DIR)
	$(CXX) $(CXXFLAGS) -o $@ $^

# Compilação dos objetos
$(BUILD_DIR)/common/%.o: $(COMMON_DIR)/%.cpp | $(BUILD_DIR)/common
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(BUILD_DIR)/generator/%.o: $(GENERATOR_DIR)/%.cpp | $(BUILD_DIR)/generator
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(BUILD_DIR)/solver/%.o: $(SOLVER_DIR)/%.cpp | $(BUILD_DIR)/solver
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Criação de diretórios (Windows)
$(BUILD_DIR)/common $(BUILD_DIR)/generator $(BUILD_DIR)/solver:
	@if not exist "$(subst /,\,$@)" mkdir "$(subst /,\,$@)"

$(BIN_DIR):
	@if not exist "$(subst /,\,$(BIN_DIR))" mkdir "$(subst /,\,$(BIN_DIR))"

# Limpeza (Windows)
clean:
	@if exist "$(subst /,\,$(BUILD_DIR))" rmdir /s /q "$(subst /,\,$(BUILD_DIR))" 2>nul || echo.
	@if exist "$(subst /,\,$(BIN_DIR))" rmdir /s /q "$(subst /,\,$(BIN_DIR))" 2>nul || echo.
	@del /q instances_*.txt 2>nul || echo.
	@echo Arquivos removidos

# Geração de instâncias
generate-simple: $(GENERATOR_BIN)
	@echo Gerando instancias simples (3-5 variaveis)...
	$(GENERATOR_BIN) 30 3 5 4

generate-medium: $(GENERATOR_BIN)
	@echo Gerando instancias medias (10-15 variaveis)...
	$(GENERATOR_BIN) 20 10 15 6

generate-hard: $(GENERATOR_BIN)
	@echo Gerando instancias dificeis (20-26 variaveis)...
	$(GENERATOR_BIN) 10 20 26 8

# Teste das instâncias (Windows)
test: $(SOLVER_BIN)
	@echo Testando instancias...
	@for %%f in (instances_*.txt) do ( \
		echo Testando arquivo: %%f && \
		$(SOLVER_BIN) "%%f" -a -t 30 -s && \
		echo. \
	)
	@if not exist instances_*.txt echo Nenhuma instancia encontrada! Execute 'make generate-simple' primeiro.

# Ajuda
help:
	@echo Targets disponiveis:
	@echo   all              - Compila gerador e solver
	@echo   generate-simple  - Gera 30 instancias simples (3-5 variaveis)
	@echo   generate-medium  - Gera 20 instancias medias (10-15 variaveis)
	@echo   generate-hard    - Gera 10 instancias dificeis (20-26 variaveis)
	@echo   test             - Testa todas as instancias com timeout de 30s
	@echo   clean            - Remove arquivos de build e instancias
	@echo   help             - Mostra esta mensagem
	@echo.
	@echo Distribuicao de tipos:
	@echo   70%% Tautologias, 20%% Contradicoes, 10%% Aleatorias
	@echo.
	@echo Fluxo tipico:
	@echo   make -f Makefile.windows                    # Compila tudo
	@echo   make -f Makefile.windows generate-simple    # Gera instancias simples
	@echo   make -f Makefile.windows test               # Testa as instancias
	@echo.
	@echo NOTA: O timeout pode nao funcionar no Windows (limitacao do sistema)
